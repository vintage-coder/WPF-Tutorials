<Window x:Class="CRUDWPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CRUDWPF"
        xmlns:data="clr-namespace:CRUDWPF.ViewModels"
        xmlns:local1="clr-namespace:CRUDWPF.Models"
        xmlns:validate="clr-namespace:CRUDWPF.Validation"
        xmlns:convert="clr-namespace:CRUDWPF.Converters"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
        xmlns:i = "http://schemas.microsoft.com/expression/2010/interactivity" 
        xmlns:ei = "http://schemas.microsoft.com/expression/2010/interactions" 
        xmlns:p="clr-namespace:CRUDWPF.Properties"
        mc:Ignorable="d"
        FontSize="15"
        FontWeight="SemiBold"
        WindowStyle="ThreeDBorderWindow"
        WindowStartupLocation="CenterScreen"
        Background="Transparent"
        ResizeMode="CanResize"
       
        Title="DataGrid Project" Height="760" Width="1520" Icon="Assets/datagrid_icon_143026.ico" >

    <Window.Resources>
     
        <ObjectDataProvider x:Key="myEnumData" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">

            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="local1:Roles" />
            </ObjectDataProvider.MethodParameters>

        </ObjectDataProvider>

       

        <!--<data:EmployeeViewModel x:Key="employeeViewModel"/>-->

        <convert:CharToDateTimeConverter x:Key="charConverter"></convert:CharToDateTimeConverter>


        <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="40"/>
            <Setter Property="Width" Value="200"/>
            <Setter Property="Margin" Value="25,0"/>
            <Setter Property="BorderBrush" Value="WhiteSmoke"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Background" Value="Teal"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="10" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">

                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Content="{TemplateBinding Content}"
                         VerticalAlignment="{TemplateBinding VerticalContentAlignment}"                                         />
                            
                            
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="5" Color="LightBlue" BlurRadius="10" Direction="270" />

                            </Border.Effect>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="Teal"/>
                                <Setter Property="Foreground" Value="DarkBlue"/>
                                <Setter Property="FontWeight" Value="SemiBold"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="Teal"/>
                                <Setter Property="Foreground" Value="DarkRed"/>
                                <Setter Property="FontWeight" Value="SemiBold"/>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>


                </Setter.Value>
            </Setter>
        </Style>

        <!--<CollectionViewSource  x:Key="cvs" Source="{Binding EmployeeData}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="EMPID" Direction="Ascending"/>
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>-->


        
        
        <!--<CollectionViewSource x:Key="MyItemsViewSource" Source="{employeeViewModel}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="EMPID" Direction="Ascending"/>
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>-->




        <Color x:Key="BackgroundColor">#AE2F33</Color>
        <Color x:Key="StandardColor">#800000</Color>
        <Color x:Key="HoverColor">#AAC64D45</Color>
        <Color x:Key="PressedColor">#AA0000</Color>
        <Color x:Key="DialogBackgroundColor">#FF666666</Color>
        <Color x:Key="ScollBarBackgroundStart">#77C64D45</Color>
        <Color x:Key="ScollBarBackgroundEnd">#99C64D45</Color>
        <SolidColorBrush x:Key="StandardBrush" Color="{StaticResource StandardColor}" />
        <SolidColorBrush x:Key="HoverBrush" Color="{StaticResource HoverColor}" />
        <SolidColorBrush x:Key="BackgroundBrush" Color="{StaticResource BackgroundColor}" />
        <LinearGradientBrush x:Key="ScollBarBackgroundBrush" StartPoint="0,0" EndPoint="1,0">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0" Color="{StaticResource ScollBarBackgroundStart}" />
                <GradientStop Offset="1" Color="{StaticResource ScollBarBackgroundEnd}" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>




        <!--  Scrollbar Buttons  -->
        <!--<Style x:Key="ScrollButtons" TargetType="{x:Type RepeatButton}">-->
            <Style  TargetType="{x:Type RepeatButton}">
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Name="Border" Background="Transparent">
                            <ContentPresenter Name="ContentPresenter"
						                  HorizontalAlignment="Center"
						                  VerticalAlignment="Center"
						                  Content="{TemplateBinding Content}"
						                  ContentTemplate="{TemplateBinding ContentTemplate}"
						                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>




        <!--  Scrollbar Thumbs  -->
        <!--<Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">-->
            <Style  TargetType="{x:Type Thumb}">
            <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Grid Name="Grid">
                            <Rectangle Width="Auto"
						           Height="Auto"
						           HorizontalAlignment="Stretch"
						           VerticalAlignment="Stretch"
						           Fill="Transparent" />
                            <Rectangle Name="Rectangle1"
						           Width="7"
						           Height="Auto"
						           HorizontalAlignment="Stretch"
						           VerticalAlignment="Stretch"
						           Fill="{TemplateBinding Background}"
						           RadiusX="4"
						           RadiusY="4" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Tag" Value="Horizontal">
                                <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                                <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>





        <!--  Scrollbar  -->
        <!--<Style x:Key="MyScrollBar" TargetType="{x:Type ScrollBar}">-->
            <Style TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrush}}" />
            <Setter Property="Background" Value="{DynamicResource ScollBarBackgroundBrush}" />
            <Setter Property="Width" Value="12" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="GridRoot"
					      Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidth}}"
					      Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="18" />
                                <RowDefinition Height="0.00001*" />
                                <RowDefinition MaxHeight="18" />
                            </Grid.RowDefinitions>
                            <RepeatButton x:Name="DecreaseRepeat"
						              Command="ScrollBar.LineUpCommand"
						              Foreground="{StaticResource StandardBrush}"
						              Style="{DynamicResource ScrollButtons}">
                                <Path x:Name="DecreaseArrow"
							      HorizontalAlignment="Center"
							      VerticalAlignment="Center"
							      Data="F1 M 3.5,0L 0,7L 7,7L 3.5,0 Z "
							      Fill="{StaticResource StandardBrush}" />
                            </RepeatButton>
                            <Track x:Name="PART_Track"
						       Grid.Row="1"
						       Focusable="false"
						       IsDirectionReversed="true">
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb"
								       Background="{DynamicResource ButtonDefaultBrush}"
								       Style="{DynamicResource ScrollThumbs}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp"
								              Command="ScrollBar.PageDownCommand"
								              Focusable="false"
								              Opacity="0" />
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown"
								              Command="ScrollBar.PageUpCommand"
								              Focusable="false"
								              Opacity="0" />
                                </Track.DecreaseRepeatButton>
                            </Track>
                            <RepeatButton x:Name="IncreaseRepeat"
						              Grid.Row="2"
						              Command="ScrollBar.LineDownCommand"
						              Foreground="{DynamicResource StandardBrush}"
						              Style="{DynamicResource ScrollButtons}">
                                <Path x:Name="IncreaseArrow"
							      HorizontalAlignment="Center"
							      VerticalAlignment="Center"
							      Data="F1 M 3.5,7L 7,0L 0,0L 3.5,7 Z "
							      Fill="{StaticResource StandardBrush}" />
                            </RepeatButton>
                        </Grid>

                        <ControlTemplate.Triggers>

                            <Trigger SourceName="IncreaseRepeat" Property="IsMouseOver" Value="true">
                                <Setter TargetName="IncreaseArrow" Property="Fill" Value="{StaticResource HoverBrush}" />
                            </Trigger>
                            <Trigger SourceName="DecreaseRepeat" Property="IsMouseOver" Value="true">
                                <Setter TargetName="DecreaseArrow" Property="Fill" Value="{StaticResource HoverBrush}" />
                            </Trigger>

                            <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                <Setter TargetName="Thumb" Property="Background" Value="{StaticResource HoverBrush}" />
                            </Trigger>
                            <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                <Setter TargetName="Thumb" Property="Background" Value="{StaticResource StandardBrush}" />
                            </Trigger>

                            <Trigger SourceName="IncreaseRepeat" Property="IsPressed" Value="true">
                                <Setter TargetName="IncreaseArrow" Property="Fill" Value="{StaticResource StandardBrush}" />
                            </Trigger>
                            <Trigger SourceName="DecreaseRepeat" Property="IsPressed" Value="true">
                                <Setter TargetName="DecreaseArrow" Property="Fill" Value="{StaticResource StandardBrush}" />
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="IncreaseArrow" Property="Fill" Value="{DynamicResource LayerChild1Brush}" />
                                <Setter TargetName="DecreaseArrow" Property="Fill" Value="{DynamicResource LayerChild1Brush}" />
                                <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="Orientation" Value="Horizontal">
                                <Setter TargetName="GridRoot" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="PART_Track" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Width" Value="Auto" />
                                <Setter Property="Height" Value="12" />
                                <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                                <Setter TargetName="DecreaseRepeat" Property="Command" Value="ScrollBar.LineLeftCommand" />
                                <Setter TargetName="IncreaseRepeat" Property="Command" Value="ScrollBar.LineRightCommand" />
                                <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                                <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <DataTemplate x:Key="EmployeeDetail">
            <Border BorderThickness="0" Background="BlanchedAlmond" Padding="10">
                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock FontSize="12" Text="Email: " VerticalAlignment="Center" />
                        <TextBlock FontSize="16" Foreground="MidnightBlue" Text="{Binding Email}" VerticalAlignment="Center" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock FontSize="12" Text="Role: " VerticalAlignment="Center" />
                        <TextBlock FontSize="16" Foreground="MidnightBlue" Text="{Binding Role}" VerticalAlignment="Center" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock FontSize="12" Text="Date Of Birth: " VerticalAlignment="Center" />
                        <TextBlock FontSize="16" Foreground="MidnightBlue" Text="{Binding DOB}" VerticalAlignment="Center" />
                    </StackPanel>
                </StackPanel>
            </Border>
        </DataTemplate>


    </Window.Resources>

    <!--ItemsSource="{Binding EmployeeData}"-->

    <!--DataContext="{Binding Source={StaticResource employeeViewModel}}"-->
    
    <Border Background="LightBlue" CornerRadius="15">
        <Grid Margin="0,0,-0.2,0.2" >
            <Grid.RowDefinitions>
                <RowDefinition Height="700"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>

            <DataGrid Grid.Row="0" x:Name="dg1" VerticalAlignment="Top" AutoGenerateColumns="False" Margin="0,0,-6,0" Width="1520" Height="700"  CanUserAddRows="True" 
                SelectionMode="Extended" SelectionUnit="CellOrRowHeader"               CommandManager.PreviewExecuted="DriversDataGrid_PreviewDeleteCommandHandler"
                      
        CanUserDeleteRows="True" ItemsSource="{Binding EmployeesCollectionView, UpdateSourceTrigger=PropertyChanged}"  CanUserReorderColumns="False" HorizontalGridLinesBrush="DarkBlue" VerticalGridLinesBrush="DarkGreen" ColumnWidth="*" CanUserSortColumns="True" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Visible" CellEditEnding="dg1_CellEditEnding" EnableColumnVirtualization="True" EnableRowVirtualization="True" VirtualizingPanel.VirtualizationMode="Recycling"  >


                <!--<i:Interaction.Triggers>
                    <i:EventTrigger EventName="CellEditEnding" >
                        <i:InvokeCommandAction Command="{Binding UpdateCommand }" CommandParameter="{Binding ElementName=dg1,Path=SelectedItem}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>-->


                

                <DataGrid.Resources>
                    
                    <Style TargetType="{x:Type DatePicker}" x:Key="datepickerstyle">

                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                    

                    <Style TargetType="{x:Type TextBlock}" x:Key="gridElementAlignment">

                        <Setter Property="TextAlignment" Value="Center"/>
                        <Setter Property="Padding" Value="15,15"/>

                    </Style>


                    <Style TargetType="{x:Type CheckBox}" x:Key="gridCheckBoxElement">
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>

                    </Style>


                    <Style TargetType="{x:Type ComboBox}" x:Key="gridComboBoxElement" >
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>

                    <!--Editing Column style-->
                    <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="Padding" Value="10"/>
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="Background" Value="Red"/>
                                <Setter Property="ToolTip" 
                Value="{Binding RelativeSource={RelativeSource Self},
                  Path=(Validation.Errors)[0].ErrorContent}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>


                    <Style x:Key="gridCheckboxEditStyle" TargetType="{x:Type CheckBox}">
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                    

                    <Style TargetType="{x:Type ToolTip}">
                        <Setter Property="Foreground" Value="Red"/>
                        <Setter Property="Background" Value="LightBlue"/>
                    </Style>

                    <Style TargetType="{x:Type DataGridRowHeader}">
                        <Setter Property="Width" Value="40"/>
                        <Setter Property="Background" Value="SaddleBrown"/>
                      
                        <Setter Property="BorderBrush" Value="Black"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Cursor" Value="Hand"/>

                    </Style>

                    <Style TargetType="{x:Type DataGrid}">
                        
                        <Setter Property="AlternatingRowBackground" Value="Orange"/>
                        <Setter Property="Background" Value="LightBlue"/>
                        <Setter Property="BorderBrush" Value="Black"/>
                        <Setter Property="BorderThickness" Value="2"/>
                        <Setter Property="AlternationCount" Value="2"/>
                        <Setter Property="FrozenColumnCount" Value="3"/>
                        
                    </Style>

                    <Style TargetType="{x:Type DataGridColumnHeader}" >
                        <Setter Property="Height" Value="40"/>
                        <Setter Property="Background" Value="Red"/>
                        <Setter Property="BorderBrush" Value="Black"/>
                        <Setter Property="SeparatorVisibility" Value="Visible"/>
                        <Setter Property="SeparatorBrush" Value="DarkBlue"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="FontWeight" Value="SemiBold"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="Cursor" Value="Hand"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                                    <Grid>

                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualState x:Name="Normal" />
                                                <VisualState x:Name="MouseOver">
                                                    <Storyboard>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="columnHeaderBorder" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                            <EasingColorKeyFrame KeyTime="0" Value="MediumBlue" />
                                                        </ColorAnimationUsingKeyFrames>

                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="columnHeaderBorder" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                            <EasingColorKeyFrame KeyTime="0" Value="GreenYellow" />
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>


                                                </VisualState>


                                                <VisualState x:Name="Pressed">
                                                    <Storyboard>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="columnHeaderBorder" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                            <EasingColorKeyFrame KeyTime="0" Value="DeepPink" />
                                                        </ColorAnimationUsingKeyFrames>

                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="columnHeaderBorder" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                            <EasingColorKeyFrame KeyTime="0" Value="Black" />
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>


                                                </VisualState>


                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>

                                        <Border x:Name="columnHeaderBorder"
		BorderThickness="1"
		Padding="3,0,3,0">
                                            <Border.BorderBrush>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <GradientStop Offset="0" Color="#A5A5A5" />
                                                    <GradientStop Offset="1" Color="#4B4B4B" />
                                                </LinearGradientBrush>
                                            </Border.BorderBrush>
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                    <GradientStop Offset="0" Color="#e0b7b4" />
                                                    <GradientStop Offset="1" Color="#ed1607" />
                                                </LinearGradientBrush>
                                            </Border.Background>
                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
			     VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
				SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Border>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>

                    </Style>



                    <Style TargetType="{x:Type DataGridRow}">

                        <Setter Property="Height" Value="50"/>
                    
                        <Setter Property="SnapsToDevicePixels" Value="True" />

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type DataGridRow}">
                                    <Border x:Name="DGR_Border"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="{TemplateBinding BorderThickness}"
					        SnapsToDevicePixels="True">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                <GradientStop Offset="0" Color="#AAFFFFAA" />
                                                <GradientStop Offset="1" Color="#AAFFD455" />
                                            </LinearGradientBrush>
                                        </Border.Background>
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualState x:Name="Normal" />
                                                <VisualState x:Name="Normal_AlternatingRow">
                                                    <Storyboard>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                            <EasingColorKeyFrame KeyTime="0" Value="DarkOrange" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                            <EasingColorKeyFrame KeyTime="0" Value="DarkOrange" />
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Normal_Editing">
                                                    <Storyboard>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).                         (GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                            <EasingColorKeyFrame KeyTime="0" Value="#CCAA0000" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).                         (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                            <EasingColorKeyFrame KeyTime="0" Value="Teal" />
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="MouseOver">
                                                    <Storyboard>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).                         (GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                            <EasingColorKeyFrame KeyTime="0" Value="Indigo" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).                         (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                            <EasingColorKeyFrame KeyTime="0" Value="#AAF54B4B" />
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                            </VisualStateGroup>

                                        </VisualStateManager.VisualStateGroups>
                                        
                                        
                                        <SelectiveScrollingGrid>
                                            <SelectiveScrollingGrid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                            </SelectiveScrollingGrid.ColumnDefinitions>
                                            <SelectiveScrollingGrid.RowDefinitions>
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </SelectiveScrollingGrid.RowDefinitions>
                                            <DataGridCellsPresenter Grid.Column="1"
							                        ItemsPanel="{TemplateBinding ItemsPanel}"
							                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            <DataGridDetailsPresenter Grid.Row="1"
							                          Grid.Column="1"
							                          SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen,
							                                                                                         ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical},
							                                                                                         Converter={x:Static DataGrid.RowDetailsScrollingConverter},
							                                                                                         RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
							                          Visibility="{TemplateBinding DetailsVisibility}" />
                                            <DataGridRowHeader Grid.RowSpan="2"
							                   SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
							                   Visibility="{Binding HeadersVisibility,
							                                        ConverterParameter={x:Static DataGridHeadersVisibility.Row},
							                                        Converter={x:Static DataGrid.HeadersVisibilityConverter},
							                                        RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        </SelectiveScrollingGrid>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>



                    <Style TargetType="{x:Type CalendarDayButton}" x:Key="styleCalendarDayButton">

                        <Setter Property="Height" Value="20"/>


                        <Setter Property="Width" Value="20"/>

                    </Style>

                    <Style TargetType="{x:Type CalendarButton}" x:Key="styleCalendarButton">

                        <Setter Property="Height" Value="20"/>
                        <Setter Property="Width" Value="20"/>
                        <Setter Property="FontWeight" Value="SemiBold"/>
                        <Setter Property="FontSize" Value="10"/>
                    </Style>

                    <Style TargetType="{x:Type Calendar}"
           x:Key="styleCalendar">
                        <Setter Property="IsTodayHighlighted" Value="True"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                    <GradientStop Color="Yellow" Offset="0.5"/>
                                    <GradientStop Color="Green" Offset="1"/>


                                </LinearGradientBrush>
                            </Setter.Value>

                        </Setter>
                        <Setter Property="BorderBrush" Value="DarkBlue"/>
                        <Setter Property="BorderThickness" Value="2"/>
                        <Setter Property="CalendarButtonStyle" Value="{StaticResource styleCalendarButton}"/>
                        <Setter Property="CalendarDayButtonStyle" Value="{StaticResource styleCalendarDayButton}"/>

                    </Style>

                    <Style TargetType="{x:Type CalendarButton}">
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                    <GradientStop Color="Yellow" Offset="0.2"/>
                                    <GradientStop Color="Green" Offset="0.5"/>

                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    

                </DataGrid.Resources>

                <DataGrid.Columns>

                    

                    <DataGridTextColumn  ElementStyle="{StaticResource gridElementAlignment}" IsReadOnly="True" EditingElementStyle="{StaticResource errorStyle}" x:Name="empid" Header="Emp ID" Binding="{Binding Path=EMPID,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}" SortDirection="Ascending" SortMemberPath="EMPID" Visibility="Visible"></DataGridTextColumn>



                    <DataGridTextColumn Validation.ErrorTemplate="{StaticResource errorTemplate}" ElementStyle="{StaticResource gridElementAlignment}" EditingElementStyle="{StaticResource errorStyle}" x:Name="firstname" Header="First Name" Binding="{Binding Path=FirstName,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"></DataGridTextColumn>


                    <DataGridTextColumn ElementStyle="{StaticResource gridElementAlignment}" EditingElementStyle="{StaticResource errorStyle}" x:Name="lastname" Header="Last Name" Binding="{Binding Path=LastName,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"></DataGridTextColumn>


                    <DataGridTextColumn ElementStyle="{StaticResource gridElementAlignment}" EditingElementStyle="{StaticResource errorStyle}" x:Name="email" Header="Email" Binding="{Binding Path=Email,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"></DataGridTextColumn>


                    <DataGridCheckBoxColumn EditingElementStyle="{StaticResource gridCheckboxEditStyle}" ElementStyle="{StaticResource
                        gridCheckBoxElement}" x:Name="ismember" Header="IsMember" Binding="{Binding Path=IsMember,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,NotifyOnTargetUpdated=True,NotifyOnSourceUpdated=True}">

                      
                        <!--<i:Interaction.Triggers>
                            
                            <i:EventTrigger EventName="CellEditEnding" >
                                <i:InvokeCommandAction Command="{Binding UpdateCommand }" CommandParameter="{Binding ElementName=dg1,Path=SelectedItem}"/>
                            </i:EventTrigger>
                            
                        </i:Interaction.Triggers>-->
                        
                        <!--<i:Interaction.Triggers>
                            <i:EventTrigger EventName="Checked">
                                <i:InvokeCommandAction Command="{Binding UpdateCommand}" CommandParameter="{Binding ElementName=dg1, Path=SelectedItem}" />
                            </i:EventTrigger>

                            <i:EventTrigger EventName="UnChecked">
                                <i:InvokeCommandAction Command="{Binding UpdateCommand}" CommandParameter="{Binding ElementName=dg1, Path=SelectedItem}" />
                            </i:EventTrigger>

                        </i:Interaction.Triggers>-->

                    </DataGridCheckBoxColumn>



                    <DataGridCheckBoxColumn  EditingElementStyle="{StaticResource gridCheckboxEditStyle}" ElementStyle="{StaticResource
                        gridCheckBoxElement}"  x:Name="status" Header="Status" Binding="{Binding Path=Status,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged ,NotifyOnSourceUpdated=True,NotifyOnTargetUpdated=True}" >
                        
                        
                        
                    </DataGridCheckBoxColumn>






                    <DataGridTemplateColumn x:Name="dob" Header="Date of Birth" Visibility="Visible">

                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock x:Name="textBlock1" Style="{StaticResource gridElementAlignment}" Text="{Binding DOB,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,Converter={StaticResource charConverter}}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>

                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>

                                <DatePicker VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="DP1"    IsTodayHighlighted="True"  CalendarStyle="{StaticResource styleCalendar}" SelectedDate="{Binding Path=DOB,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Loaded="DP1_Loaded"
            SelectedDateFormat="Short" CalendarOpened="DP1_CalendarOpened" Initialized="DP1_Initialized">
                                    
                                </DatePicker>
                               

                            </DataTemplate>
                            
                        </DataGridTemplateColumn.CellEditingTemplate>

                    </DataGridTemplateColumn>

                    

                    <!--SelectedDate="{Binding DOB,Mode=TwoWay}"-->

                    <!--DisplayDate="{x:Static sys:DateTime.Now}"-->

                    <!--<DataGridTemplateColumn x:Name="dob" Header="Date of Birth">
                        
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Path=SelectedDate, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, ElementName=datepick}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <DatePicker x:Name="datepick" SelectedDate="{x:Static sys:DateTime.Now}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                        
                    </DataGridTemplateColumn>-->


                    <DataGridComboBoxColumn ElementStyle="{StaticResource gridComboBoxElement }" Header="Role" ItemsSource="{Binding Source={StaticResource myEnumData}}" SelectedItemBinding="{Binding Role,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" EditingElementStyle="{StaticResource gridComboBoxElement}"></DataGridComboBoxColumn>
                    
                    
                    
                    <!--<DataGridTemplateColumn x:Name="role" Header="Role" Width="100">
                        
                        <DataGridTemplateColumn.CellTemplate>
                            
                            <DataTemplate>
                                <TextBlock Text="{Binding Role,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>

                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <ComboBox Height="22" ItemsSource="{Binding ComboData, Source={StaticResource employeeViewModel}}" SelectedItem="{Binding Role,Mode=TwoWay}"></ComboBox>
                            </DataTemplate>
                            
                        </DataGridTemplateColumn.CellEditingTemplate>

                    </DataGridTemplateColumn>-->



                </DataGrid.Columns>




                <DataGrid.RowValidationRules>
                    <validate:EmployeeValidationRule ValidationStep="UpdatedValue"/>
                </DataGrid.RowValidationRules>

                <DataGrid.RowValidationErrorTemplate>
                    <ControlTemplate >
                        <Grid Margin="0,-2,0,-2"
            ToolTip="{Binding RelativeSource={RelativeSource
            FindAncestor, AncestorType={x:Type DataGridRow}},
            Path=(Validation.Errors)[0].ErrorContent}">
                            <Ellipse StrokeThickness="2" Fill="Red" 
              Width="30" 
              Height="30" Visibility="Visible"/>
                            <TextBlock Text="!" FontSize="20" 
              FontWeight="Bold" Foreground="White" 
              HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Grid>
                    </ControlTemplate>

                    
                </DataGrid.RowValidationErrorTemplate>


            </DataGrid>

            <Grid Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>

                <Button Command="{Binding InsertCommand }" CommandParameter="{Binding ElementName=dg1,Path=SelectedItem}" Style="{StaticResource ButtonStyle}" Content="Insert" />


                <Button Command="{Binding UpdateCommand}" CommandParameter="{Binding ElementName=dg1,Path=SelectedItem}"  Grid.Column="1" Style="{StaticResource ButtonStyle}" Content="Update"/>


                <Button Command="{Binding DeleteCommand}" CommandParameter="{Binding ElementName=dg1,Path=SelectedItem}" Grid.Column="2" Style="{StaticResource ButtonStyle}" Content="Delete"/>


                <Button Content="Add" Command="{Binding AddCommand}" Style="{StaticResource ButtonStyle}" Grid.Column="3"/>

                
            </Grid>



        </Grid>



    </Border>

</Window>
